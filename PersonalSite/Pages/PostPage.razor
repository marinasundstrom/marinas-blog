@page "/articles/{*slug}"
@page "/blog/{*slug}"
@page "/{*slug}"
@implements IDisposable
@using Models
@using PersonalSite.Disqus
@using PersonalSite.Markdown
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Marina Sundström</PageTitle>

@if (notFound)
{
    <NotFound />
}
else
{
    @if (loadingError && exception is not null)
    {
        <h1>@exception.GetType().Name</h1>

        <p>@exception.Message</p>

        <code>
            @exception.StackTrace
        </code>
    }

    @if (post is not null)
    {
        <PageTitle>@post.Title - Marina Sundström</PageTitle>

        <article class="post outer text">

            <div class="inner container">

                <PostHeader Title="@post.Title" Subtitle="@post.Subtitle" Author="@post.Author" Published="@post.Published"
                    Tags="@post.Tags" EstimatedTime="@EstimatedTime" ShowEstimatedTime="isBlog" ShowCommentCount="isBlog" />

                @if(post.Image is not null) 
                {
                    <img src="@post.Image" alt="@post.ImageAlt"  class="cover my-2 mt-3" style="max-height: 280px;width: 100%;object-fit: cover;" />
                    @if(post.ImageAlt is not null) 
                    {
                        <small class="text-muted">@post.ImageAlt@if(post.ImageCredit is not null) { <span> • By @post.ImageCredit</span> }</small>
                    }
                }

            </div>

            <div class="mt-4 inner container">
                <MarkdownView Content="@post.Content" />

                @if (isBlog)
                {
                    <div style="margin-top: 42px;">
                        <DisqusThread />
                    </div>
                }
            </div>
        </article>

        @*
    <div class="col-md-2">
    <div class="social mx-4">
    <FacebookShareButton Url="@NavigationManager.Uri" />
    <TwitterShareButton Url="@NavigationManager.Uri" Text="@($"{post.Title}")" Hashtags="@(post.Tags ?? new
    string[0])"></TwitterShareButton>
    <LinkedInShareButton Url="@NavigationManager.Uri" Title="@($"{post.Title}")" Summary="Test" Source="Marina
    Sundström"></LinkedInShareButton>
    </div>
    </div>
*@
    }
}

@code {
    Post? post;
    private bool loadingError;
    private Exception? exception;
    private bool notFound;
    private bool isBlog;

    [Parameter]
    public string Slug { get; set; }

    [Parameter]
    public TimeSpan EstimatedTime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        if(uri.PathAndQuery.Contains("/blog")) 
        {
            var newUri = NavigationManager.Uri.Replace("/blog", "/articles");
            NavigationManager.NavigateTo(newUri, replace: true);
        }

        NavigationManager.LocationChanged += OnLocationChanged;

        await LoadData();
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        notFound = false;
        loadingError = false;

        try
        {
            string url = null!;

            isBlog = NavigationManager.Uri.ToLower().Contains("articles") || NavigationManager.Uri.ToLower().Contains("blog");

            if (isBlog)
            {
                url = $"/posts/{Slug}.md";
            }
            else
            {
                url = $"/pages/{Slug}.md";
            }

            var response = await Http.GetAsync(url);

            response.EnsureSuccessStatusCode();

            var str = await response.Content.ReadAsStringAsync();

            var frontmatter = MarkdownExtensions.GetFrontMatter<BlogFrontMatter>(str);

            post = new Post()
            {
                Title = frontmatter.Title,
                Subtitle = frontmatter.Subtitle,
                Slug = "hello-word",
                Author = frontmatter.Author,
                Published = frontmatter.Published,
                Image = frontmatter.Image,
                ImageAlt = frontmatter.ImageAlt,
                ImageCredit = frontmatter.ImageCreditName,
                Tags = frontmatter.Tags,
                Content = str
            };

            var estimator = new ReadTimeEstimator.Implementations.Estimators.MarkdownEstimator();
            EstimatedTime = TimeSpan.FromMinutes(estimator.ReadTimeInMinutes(post.Content));
        }
        catch (HttpRequestException exc)
        {
            if (exc.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                notFound = true;
            }
            else
            {
                loadingError = true;
                exception = exc;
                return;
            }
        }
        catch (Exception exc)
        {
            exception = exc;
            loadingError = true;
            return;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}