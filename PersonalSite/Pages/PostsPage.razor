@page "/blog"
@page "/articles"
@implements IDisposable
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-sm-12 col-md-8">
        <PageTitle>Marina Sundström</PageTitle>

        @if (posts is null)
        {
            <text>Loading articles</text>
        }
        else
        {
            <PageTitle>Posts - Marina Sundström</PageTitle>

            <h1 class="post-title mb-4 mb-md-5">Articles</h1>

            @foreach (var post in posts)
            {
                <article class="pt-2 mb-4 mb-md-5">

                    <PostHeader Title="@post.Title" Slug="@post.Slug" Subtitle="@post.Subtitle" Author="@post.Author" Published="@post.Published"
                        Tags="@post.Tags" EstimatedTime="@post.EstimatedReadTime" ShowEstimatedTime="true"
                        ShowCommentCount="false" Smaller="true" />
                        
                </article>             
            }

            <Pagination Page="@Page.GetValueOrDefault()" PageCount="@totalPages" PageChanged="OnPageChanged" Href="/articles" />
        }
    </div>

    <div class="col-md-4">
        <h3>Tags</h3>
        <Tags />
    </div>
</div>

@code {
    IEnumerable<PostInfo>? posts;
    int totalPages = 0;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        await LoadData();
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var uri = new Uri(NavigationManager.Uri);
        if(uri.PathAndQuery.Contains("/blog")) 
        {
            var newUri = NavigationManager.Uri.Replace("/blog", "/articles");
            NavigationManager.NavigateTo(newUri, replace: true);
        }

        await LoadData();

        StateHasChanged();
    }

    async Task OnPageChanged(int page)
    {
        /*
        Page = page;
        await LoadData();

        StateHasChanged();
        */
    }

    private async Task LoadData()
    {
        if (Page is null) Page = 1;

        var response = await Http.GetAsync($"/posts/_index-{Page}.json");

        response.EnsureSuccessStatusCode();

        var str = await response.Content.ReadAsStringAsync();

        var index = System.Text.Json.JsonSerializer.Deserialize<IndexPage>(str);
        posts = index.Posts;
        totalPages = index.TotalPages;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    record IndexPage(IEnumerable<PostInfo> Posts, int Page, int TotalPages);

    record PostInfo(string Title, string? Subtitle, string Slug, string Author, string? Image, DateTime Published, TimeSpan?
    EstimatedReadTime, string Excerpt, string[] Tags);
}