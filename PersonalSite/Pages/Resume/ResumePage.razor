@page "/resume"
@using System.Linq
@using System.IO
@using System.Text.Json
@using PersonalSite.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Resumé - Marina Sundström</PageTitle>

<div class="row">
    <article class="sections inner">

        <h1>Resumé</h1>

        @if(!loaded) 
        {
            <span>Loading...</span>
        }
        else 
        {
        <section class="mb-5">
            <PersonalSite.Markdown.MarkdownView Content="@objectiveContent" />
        </section>

        <section>
        
        <div class="d-flex pb-4 pt-4 mt-4">
            <div class="flex-grow-1">
                <h2 id="experience" class="pt-0 mt-0">Experience</h2>
            </div>
            <div>
                <a class="btn btn-sm btn-outline-secondary" href="/pages/resume.json" target="_blank"><i class="oi oi-data-transfer-download"></i><span> JSON</span></a>
            </div>
        </div>

        <div class="mb-4">
            <div class="form-check">
                <InputCheckbox class="form-check-input" @bind-Value="IncludeAssignments">Show assignments</InputCheckbox>
                <label class="form-check-label" for="flexCheckIndeterminate">
                    Show assignments as consultant
                </label>
            </div>
        </div>

            @if (resume is null)
            {
                <text>Loading experiences...</text>
            }
            else
            {
                IEnumerable<Experience> groups1 = resume.Experience
                   .OrderByDescending(x => x.Highlight)
                   .ThenByDescending(x => Default(x.EndDate));

                if(!IncludeAssignments) 
                {
                    groups1 = groups1.Where(x => !x.Consultant);
                }

                var groups = 
                   groups1.GroupBy(e => e.Company);

                <div class="mt-4 mb-5" style="max-width: 820px">
                    <ExperienceList Groups="@groups.Take(5)" />

                    @if(ShowMore) 
                    {
                            <ExperienceList Groups="@groups.Skip(5)" />

                            <div class="d-flex justify-content-center">
                                <button class="btn btn-lg btn-outline-secondary mt-4" href="#" @onclick="ToggleShowMore">Show less</button>
                            </div>
                    }
                    else 
                    {
                        <div class="d-flex justify-content-center">
                            <button class="btn btn-lg btn-outline-secondary mt-4" href="#" @onclick="ToggleShowMore">Show @groups.Skip(5).Count() more</button>
                        </div>
                    }
                </div>

            }

        </section>

        <section class="mt-4 mb-4">

            @if (resume is null)
            {
                <text>Loading education...</text>
            }
            else
            {
                <h1 id="education" class="pb-2">Education</h1>

                @foreach (var education in resume.Education)
                {
                    <div class="d-flex">
                         <div class="col-logo">
                            <Logo Src="@education.Logo" Alt="@($"{education.School} logo")" Class="m-4 mt-2" Href="@education.Link" />
                        </div>
                        <div class="flex-grow-1">
                            <EducationView Model="education" />
                        </div>
                    </div>

                    @if(resume.Education.LastOrDefault() != education) 
                    {
                        <hr />
                    }
                }
            }

        </section>

        <section class="mt-4 mb-4" style="page-break-inside: avoid;">

             <div class="d-flex pb-2">
                <div class="flex-grow-1">
                    <h2 id="skills" class="pt-0 mt-0">Skills</h2>
                </div>
                <div>
                    <a class="btn btn-sm btn-outline-secondary" href="/pages/skills.json" target="_blank"><i class="oi oi-data-transfer-download"></i><span> JSON</span></a>
                </div>
            </div>

            @if (skillAreas is null)
            {
                <text>Loading skills...</text>
            }
            else
            {
                            
                <div class="mb-5">
                    <small class="text-muted">Click on a skill to learn more.</small>
                </div>

                <dl class="skills grid-dl">

                    @foreach (var (skillArea, skills) in skillAreas)
                    {
                        <dt>@skillArea</dt>
                        <dd>
                            @foreach (var (skillName, skillInfo) in skills)
                            {
                                var comment = (skillInfo.Comment is not null ? $"<div class=\"mt-2\"><b>Comment:</b><p> {skillInfo.Comment}</p></div>" : string.Empty);
                                    
                                var link = (skillInfo.Link is not null ? $"<div class=\"mt-2\"><small><a href=\"{skillInfo.Link.Href}\" target=\"_blank\">{skillInfo.Link.Title}</a></small></div>" : string.Empty);

                                    var content = $@"<div>
                                        <div><b>Skill level:</b> {SkillLevelToString(skillInfo.Level)}</div>
                                        {comment}
                                        {link}
                                    </div>";

                                <a tabindex="0" class="badge rounded-pill tag me-1 mb-1 text-decoration-none" role="button" data-bs-toggle="popover" data-bs-trigger="focus" title="@skillName" data-bs-content="@content" data-bs-html="true">
                                    @skillName
                                </a>
                            }
                </dd>
                    }

                </dl>
            }

        </section>
        }
    </article>
</div>

@code {
    bool loaded = false;
    Resume? resume;
    IDictionary<string, Dictionary<string, SkillInfo>>? skillAreas;
    string? objectiveContent;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            Task.Run(async () => {
                objectiveContent = await Http.GetStringAsync("/pages/resume.md");
            }),

            Task.Run(async () => {
                var json = await Http.GetStringAsync("/pages/resume.json");
                resume = Resume.FromJson(json);
            }),

            Task.Run(async () => {
                var json = await Http.GetStringAsync("/pages/skills.json");
                skillAreas = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, SkillInfo>>>(json)!;
            }));

        loaded = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("blazorHelpers.enablePopovers");
    }

    [Parameter]
    public bool ShowMore { get; set; }

    public bool IncludeAssignments { get; set; }

    void ToggleShowMore() 
    {
        ShowMore = !ShowMore;
    }

    class SkillInfo 
    {
        public int Level { get; set; }

        public string? Comment { get; set; }

        public LinkInfo? Link { get; set; }
    }

    class LinkInfo 
    {
        public string Title { get; set; }

        public string Href { get; set; }
    }

    string SkillLevelToString(int skillLevel)
    {
        return skillLevel switch {
            1 => "Novice",
            2 => "Advanced Beginner",
            3 => "Competent",
            4 => "Proficient",
            5 => "Expert",
            _ => "Invalid"
        };
    }

    DateTime Default(DateTime? dt) 
    {
        if(dt == null) 
        {
            return DateTime.Now.AddDays(365);
        }
        return dt.GetValueOrDefault();
    }
}