{"Name":null,"Posts":[{"Title":"Generics in Java vs .NET","Subtitle":"A .NET developers perspective","Slug":"generics-in-java-vs-dotnet","Author":null,"Image":null,"Published":"2023-11-11T00:00:00","EstimatedReadTime":"00:10:29.8909090","Excerpt":"\u003Ch2\u003EBackground\u003C/h2\u003E\n\u003Cp\u003EI\u0027m a .NET developer, writing C# code. But 9 months ago, I joined company whose tech stack is almost exclusively Java. As I have gotten more into writing Java code, I have become more aware of the differences between Java and my beloved C#.\u003C/p\u003E\n\u003Cp\u003EBoth Java and C# are at their core object-oriented general-purpose programming languages, with similar syntaxes, but there are some fundamental differences that ar not apparent until you dig deeper. In particular, when coming to...","Tags":["C#",".NET","Generics","Programming languages"]},{"Title":"Building distributed apps in .NET with MassTransit","Subtitle":null,"Slug":"building-distributed-apps-with-masstransit","Author":null,"Image":null,"Published":"2023-11-10T00:00:00","EstimatedReadTime":"00:13:22.9090909","Excerpt":"\u003Ch2\u003EIntroduction\u003C/h2\u003E\n\u003Cp\u003ESo many apps that are being built today are part of distributed systems made up of two or more services that communicate with each other. They do so by sending messages, or publishing events. They are so called \u0026quot;Event-driven architectures\u0026quot;.\u003C/p\u003E\n\u003Cp\u003ELearning everything that enables this, the technologies and the patterns, might be cumbersome, in particular if you don\u0027t know where to start.\u003C/p\u003E\n\u003Cp\u003EThe goal of this article is to give you a starting point from which...","Tags":["C#",".NET","Distributed apps","Microservices","MassTransit","RabbitMQ"]},{"Title":"Exploring dependency injection in .NET","Subtitle":null,"Slug":"exploring-dependency-injection-in-dotnet","Author":null,"Image":null,"Published":"2023-11-09T00:00:00","EstimatedReadTime":"00:05:59.3454545","Excerpt":"\u003Cp\u003EMicrosoft provides a nifty set of dependency injection framework abstractions, as well as a default service container (IoC) implementation. Because of this architecture, it does however allow you to plug in your favorite dependency framework, like Autofac.\u003C/p\u003E\n\u003Cp\u003EWe will cover the \u003Ccode\u003EServiceCollection\u003C/code\u003E, \u003Ccode\u003EServiceProvider\u003C/code\u003E, service lifetimes, and scopes.\u003C/p\u003E\n\u003Cp\u003EFor the code to run in a Console application, you need to add a package reference:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode...","Tags":["C#",".NET"]},{"Title":"The anatomy of an ASP.NET Core app","Subtitle":"Understanding the basic concepts","Slug":"the-anatomy-of-an-aspnetcore-app","Author":null,"Image":null,"Published":"2023-09-07T00:00:00","EstimatedReadTime":"00:11:23.3454545","Excerpt":"\u003Ch2\u003EPreface\u003C/h2\u003E\n\u003Cp\u003EThe goal of this article is to give someone who is new to ASP.NET Core an overview over the basic concepts of ASP.NET Core - by not going too much into technical details. Though, I will try to cover the essentials - Showing you the simplicity of the ASP.NET Core app model.\u003C/p\u003E\n\u003Cp\u003EIf you come from NodeJS, and you have been using ExpressJS, then you might find many of the concepts familiar.\u003C/p\u003E\n\u003Cp\u003EHopefully, you will find the examples useful in understanding what ASP.NET Core...","Tags":[".NET","ASP.NET Core","Web development","Blazor","Razor"]},{"Title":"Blazor Web Apps in ASP.NET Core 8","Subtitle":null,"Slug":"blazor-web-apps-in-aspnet-core-8","Author":null,"Image":null,"Published":"2023-09-02T00:00:00","EstimatedReadTime":"00:07:06.1090909","Excerpt":"\u003Cp\u003ESome big exciting stuff is coming to Blazor on the server in ASP.NET Core 8.\u003C/p\u003E\n\u003Ch2\u003EBackground\u003C/h2\u003E\n\u003Cp\u003EIn the beginning of time, Web development used to be about the web server receiving a request from a client browser, generating some HTML, and returning it with the response. The result was a static non-interactive page that the browser rendered on screen.\u003C/p\u003E\n\u003Cp\u003EThen JavaScript came along, and added interactivity on the client-side - the ability to make changes to the content of the page...","Tags":["Blazor",".NET","ASP.NET Core","Web development"]}],"Page":1,"TotalPages":4}